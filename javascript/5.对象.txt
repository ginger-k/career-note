创建Object的方式：
	new操作符后跟构造函数，var obj = new Object();
	对象字面量表示法，var obj = {};

访问对象属性：
	点表示法
	方括号表示法，可以通过变量来访问属性

构造
    new+构造函数，如果在构造函数中没有指定返回对象，那么就返回this
	
		function Person(){return {arms:2,legs:2}}
		new Person(); // Object {arms: 2, legs: 2} 

		function Student(){this.arms=2;this.legs=2;}
		new Student(); // Student {arms: 2, legs: 2}

原型
    构造器的prototype属性，指向对象实例的原型
	对象实例原型的constructor属性，指向其构造器。
	
		function Student(){this.arms=2;this.legs=2;}
		Student.prototype.constructor;	//function Student(){this.arms=2;this.legs=2;}
		var kuang = new Student();
		Student.prototype.eyes=2;
		kuang; // Student {arms: 2, legs: 2, eyes: 2}

		function Person(){return {arms:2,legs:2}}
		var p = new Person(); // Object {arms: 2, legs: 2},原型指向Object.prototype
		Person.prototype.eyes=2;
		p; // Object {arms: 2, legs: 2}
		Object.prototype.eyes=2;
		p; // Object {arms: 2, legs: 2, eyes: 2}
	
属性：有4个描述其行为的特性
	configurable：为false，表示不能从对象中删除属性，默认true
	enumerable：为false，表示不能通过for-in枚举属性，默认true
	writable：为false，表示不能修改属性的值，默认true
	value：包含属性的数据，默认undefined
		var person = {};
		Object.defineProperty(person, 'name', {configurable: false,enumerable: false, writable: false, value: 'kuang'});
		delete person.name; //false
		person.name = 'kkkk';
		for(var property in person) {
			console.log(property + ': ' + person[property]);
		}
		person.name; //"kuang"
		
	delete 只能删除实例上的属性，不能删除原型上的属性
	
