包裹一些局部变量的函数叫做一个闭包。

function createFuncitons(){
	var result = new Array();
	for (var i =0; i<10; i++){
		result[i] = function(){
			return i; //希望能锁住变量i
		};
	}
	return result;
}

var functionArr = createFuncitons();
functionArr[1](); //结果为10

function createFuncitons(){
	var result = new Array();
	for (var i =0; i<10; i++){
		result[i] = (function(i){
			return function(){
				return i; //锁住了变量i
			}
		})(i);
	}
	return result;
}

var functionArr = createFuncitons();
functionArr[1](); //结果为10

-------------------------------------------

匿名函数的执行环境具有全局性，因此其this对象通常指向window。

var name = "The Window";
var object = {
	name : "My Object",
	getNameFunc : function(){
		return function(){
			return this.name;
		};
	}
};
object.getNameFunc()(); //"The Window"

var name = "The Window";
var object = {
	name : "My Object",
	getNameFunc : function(){
		var _self = this;
		return function(){
			return _self.name;
		};
	}
};
object.getNameFunc()(); //"My Object"

var object = {
	getFunc : function(){
		console.log(this);
		var _self = this;
		return function(){
			console.log(this);	//匿名函数中的this指向window
			console.log(_self); //所以，通过_self和闭包，保存外部的this(object)
		};
	}
};
object.getFunc()(); 
/*	Object
	Window
*/	Object