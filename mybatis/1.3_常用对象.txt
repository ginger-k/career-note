可以从XML文件或Configuration类中构建SqlSessionFactory
一旦创建了SqlSessionFactory后,SqlSessionFactoryBuilder就不需要存在了。 
因此 SqlSessionFactoryBuilder 实例的最佳范围是方法范围 (也就是本地方法变量)
org.apache.ibatis.session.SqlSessionFactoryBuilder
	 SqlSessionFactory build(Configuration config);  //不使用 XML 构建 SqlSessionFactory  
	 SqlSessionFactory build(InputStream inputStream); //从 XML 中构建 SqlSessionFactory
 
一旦被创建,SqlSessionFactory 应该在应用执行期间都存在,不需要处理或重新创建.
最佳范围是应用范围,最简单的就是使用单例模式或者静态单例模式。
org.apache.ibatis.session.SqlSessionFactory
	SqlSession openSession();//不自动提交事务
	SqlSession openSession(boolean autoCommit);//true表示自动提交事务 

用SqlSession来直接执行已映射的SQL语句,该对象包含所有执行SQL操作的方法
每个线程都应该有它自己的SqlSession实例.
SqlSession的实例不能被共享,也是线程不安全的.
因此最佳的范围是请求或方法范围.
org.apache.ibatis.session.SqlSession
	int insert(String statement);//增
	int insert(String statement, Object parameter);

	int delete(String statement);//删
	int delete(String statement, Object parameter);

	int update(String statement);//改
	int update(String statement, Object parameter);

	Object selectOne(String statement);//查,返回单个
	Object selectOne(String statement, Object parameter);

	List selectList(String statement);//查,返回多个
	List selectList(String statement, Object parameter);

	void select(String statement, Object parameter, ResultHandler handler);//查,自定义结果集

	<T> T getMapper(Class<T> type);//获取映射器,也就是动态创建DAO接口的实现类 
	
	void clearCache();